<?xml version="1.0" encoding="UTF-8"?>
<results>
Checking GoFish/src/Card.cpp...
1/10 files checked 10% done
Checking GoFish/src/Controller.cpp...
    <error file="GoFish/include/Controller.h" line="17" id="uninitMemberVar" severity="style" msg="Member variable &apos;Controller::numPlayers&apos; is not initialized in the constructor."/>
    <error file="GoFish/include/Player.h" line="20" id="noExplicitConstructor" severity="style" msg="Class &apos;Player&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided."/>
2/10 files checked 20% done
Checking GoFish/src/Deck.cpp...
3/10 files checked 30% done
Checking GoFish/src/Player.cpp...
    <error file="GoFish/src/Player.cpp" line="63" id="variableScope" severity="style" msg="The scope of the variable &apos;numMatched&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level."/>
    <error file="GoFish/src/Player.cpp" line="27" id="passedByValue" severity="style" msg="Parameter &apos;c&apos; is passed by value. It could be passed as a (const) reference which is usually faster and recommended in C++."/>
4/10 files checked 40% done
Checking GoFish/src/ViewIn.cpp...
    <error file="GoFish/src/ViewIn.cpp" line="29" id="incorrectLogicOperator" severity="style" msg="Logical conjunction always evaluates to false: numPlayers &lt;= 1 &amp;&amp; numPlayers &gt; 5. Are these conditions necessary? Did you intend to use || instead? Are the numbers correct? Are you comparing the correct variables?"/>
    <error file="GoFish/src/ViewIn.cpp" line="47" id="incorrectLogicOperator" severity="style" msg="Logical disjunction always evaluates to true: c != &apos;Y&apos; || c != &apos;N&apos;. Are these conditions necessary? Did you intend to use &amp;&amp; instead? Are the numbers correct? Are you comparing the correct variables?"/>
5/10 files checked 50% done
Checking GoFish/src/ViewOut.cpp...
6/10 files checked 60% done
Checking GoFish/src/main.cpp...
7/10 files checked 70% done
Checking GoFish/test/TestCard.cpp...
8/10 files checked 80% done
Checking GoFish/test/TestDeck.cpp...
9/10 files checked 90% done
Checking GoFish/test/TestPlayer.cpp...
    <error file="GoFish/test/TestPlayer.h" line="75" id="unsafeClassCanLeak" severity="style" msg="The class &apos;TestPlayer&apos; is unsafe, wrong usage can cause memory/resource leaks for &apos;TestPlayer::p6&apos;. This can for instance be fixed by adding proper cleanup in the destructor."/>
10/10 files checked 100% done
    <error file="GoFish/src/ViewIn.cpp" line="8" id="unusedFunction" severity="style" msg="The function &apos;choosePlayer&apos; is never used."/>
    <error file="GoFish/src/ViewOut.cpp" line="26" id="unusedFunction" severity="style" msg="The function &apos;displayTurn&apos; is never used."/>
    <error file="GoFish/src/ViewIn.cpp" line="39" id="unusedFunction" severity="style" msg="The function &apos;endTurn&apos; is never used."/>
    <error file="GoFish/src/ViewOut.cpp" line="32" id="unusedFunction" severity="style" msg="The function &apos;endingMessage&apos; is never used."/>
    <error file="GoFish/src/Deck.cpp" line="22" id="unusedFunction" severity="style" msg="The function &apos;printDeck&apos; is never used."/>
</results>
